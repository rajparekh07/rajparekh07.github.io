{"version":3,"sources":["components/ProductionPlaceholder.js","styles/global.js","data/profile.js","components/reusables/DataValueLinks.js","components/sub_components/DataValueLinksContainer.js","components/reusables/SectionDividers.js","components/sub_components/InfoGrid.js","components/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["ProductionPlaceholder","className","Header","size","color","class","Button","Group","secondary","as","href","Or","primary","blueText","whiteText","white","background","grey","DataValueLinks","Feed","Event","Label","Icon","name","this","props","icon","style","GlobalStyles","Content","Summary","target","link","value","React","Component","DataValueLinksContainer","data","map","dataElement","SectionDividers","Divider","horizontal","title","InfoGrid","Grid","Column","width","Container","textAlign","centered","columns","Row","Image","src","Data","image","circular","firstName","lastName","info","socials","App","ReactGA","initialize","pageview","window","location","pathname","search","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRA8BeA,EAxBe,kBAC1B,4BAAQC,UAAU,cACd,kBAACC,EAAA,EAAD,CAAQC,KAAK,OAAOC,MAAM,QAA1B,cAEA,mEAIA,uBAAGC,MAAM,YAAT,oBAEA,kBAACC,EAAA,EAAOC,MAAR,KACI,kBAACD,EAAA,EAAD,CAAQE,WAAS,EAACC,GAAG,IAAIC,KAAK,qGAA9B,UAEA,kBAACJ,EAAA,EAAOK,GAAR,MACA,kBAACL,EAAA,EAAD,CAAQM,SAAO,EAACH,GAAG,IAAIC,KAAK,8BAA5B,WAEA,kBAACJ,EAAA,EAAOK,GAAR,MACA,kBAACL,EAAA,EAAD,CAAQE,WAAS,EAACC,GAAG,IAAIC,KAAK,0CAA9B,e,kDCtBG,GACXG,SAAU,CACNT,MAAO,WAEXU,UAAW,CACPV,MAAO,SAEXW,MAAO,CACHC,WAAY,SAEhBC,KAAM,CACJD,WAAY,Y,SCZH,GACX,KAAQ,aACR,UAAa,MACb,SAAY,SACZ,MAAS,wBAET,MAAS,gCAET,KAAQ,CACJ,CACI,KAAQ,UACR,MAAS,gBACT,KAAQ,qEAEZ,CACI,KAAQ,WACR,MAAS,eAGjB,QAAW,CACP,CACI,KAAQ,OACR,MAAS,yBACT,KAAQ,iCAEZ,CACI,KAAQ,WACR,MAAS,iCACT,KAAQ,0CAEZ,CACI,KAAQ,OACR,MAAS,iBACT,KAAQ,qBAEZ,CACI,KAAQ,SACR,MAAS,cACT,KAAQ,kCAEZ,CACI,KAAQ,YACR,MAAS,YACT,KAAQ,qC,iBCdLE,E,uKAjBP,OACI,kBAACC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,KACI,kBAACC,EAAA,EAAD,CAAMC,KAAMC,KAAKC,MAAMC,KAAMC,MAAOC,EAAad,aAErD,kBAACK,EAAA,EAAKU,QAAN,CAAcF,MAAOC,EAAad,WAC9B,kBAACK,EAAA,EAAKW,QAAN,CAAcH,MAAOC,EAAad,UAAWL,GAAG,IAAIsB,OAAO,SAASrB,KAAMc,KAAKC,MAAMO,MAChFR,KAAKC,MAAMQ,a,GAVPC,IAAMC,WCapBC,E,uKAXD,IACEC,EAASb,KAAKC,MAAdY,KACR,OACI,kBAAClB,EAAA,EAAD,KACKkB,EAAKC,KAAI,SAAAC,GAAW,OAAM,kBAAC,EAAD,CAAgBb,KAAQa,EAAYb,KAAMO,MAASM,EAAYN,MAAOD,KAAQO,EAAYP,e,GAN/FE,IAAMC,W,SCc7BK,E,uKAXP,OACI,kBAACC,EAAA,EAAD,CAASC,YAAU,GACf,kBAACxC,EAAA,EAAD,CAAQO,GAAG,KAAKkB,MAAOC,EAAad,WAChC,kBAACQ,EAAA,EAAD,CAAMC,KAAMC,KAAKC,MAAMC,OACtBF,KAAKC,MAAMkB,Y,GANFT,IAAMC,WC4CrBS,E,uKAnCP,OACI,kBAACC,EAAA,EAAKC,OAAN,eAAaC,MAAOvB,KAAKC,MAAMsB,MAAOpB,MAAOC,EAAaX,MAAUO,KAAKC,OACrE,kBAACuB,EAAA,EAAD,CAAWC,UAAU,UACjB,kBAACJ,EAAA,EAAD,CAAMK,UAAQ,EAACC,QAAS,GACpB,kBAACN,EAAA,EAAKO,IAAN,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAKC,EAAKC,MAAOC,UAAQ,EAACtD,KAAK,YAI9C,kBAACD,EAAA,EAAD,CAAQC,KAAK,QAAQwB,MAAOC,EAAad,WACpCyC,EAAKG,UACN,0BAAM/B,MAAOC,EAAaf,UAA1B,IAAsC0C,EAAKI,WAG/C,uBAAGxD,KAAK,OAAOwB,MAAOC,EAAad,WAAnC,IAAgDyC,EAAKZ,MAArD,KAEA,kBAAC,EAAD,CAAiBjB,KAAK,cAAciB,MAAM,SAE1C,kBAACE,EAAA,EAAKO,IAAN,CAAUzB,MAAOC,EAAad,WAC1B,kBAAC,EAAD,CAAyBuB,KAAMkB,EAAKK,QAGxC,kBAAC,EAAD,CAAiBlC,KAAK,cAAciB,MAAM,YAE1C,kBAACE,EAAA,EAAKO,IAAN,CAAUzB,MAAOC,EAAad,WAC1B,kBAAC,EAAD,CAAyBuB,KAAMkB,EAAKM,iB,GA7BrC3B,IAAMC,WCJDD,IAAMC,UC8BnB2B,MAlBf,WAKE,OAHAC,IAAQC,WAAW,mBACnBD,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,QAS1D,yBAAKpE,UAAU,OACb,kBAAC,EAAD,QCxBcqE,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe963b4e.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Header\n} from 'semantic-ui-react';\n\nconst ProductionPlaceholder = () => (\n    <header className=\"App-header\">\n        <Header size='huge' color=\"blue\">Raj Parekh</Header>\n\n        <p>\n          This portfolio is under construction\n        </p>\n       \n        <p class=\"App-link\">Meanwhile visit,</p>  \n\n        <Button.Group>\n            <Button secondary as='a' href=\"https://docs.google.com/document/d/1-iLJ-8OZnjc51iMDdemKqGuc1gKxEq6OGvdC3zfcbj4/export?format=pdf\">Resume</Button>\n\n            <Button.Or />\n            <Button primary as='a' href=\"https://devdb.io/parekhraj\">Profile</Button>\n            \n            <Button.Or />\n            <Button secondary as='a' href=\"https://in.linkedin.com/in/rajparekh07\">LinkedIn</Button>\n\n          </Button.Group>\n       \n      </header>\n)\n\nexport default ProductionPlaceholder;","\nexport default {\n    blueText: {\n        color: '#2C85D0'\n    },\n    whiteText: {\n        color: 'white'\n    },\n    white: {\n        background: 'white'\n    },\n    grey: {\n      background: \"#282c34\"\n    }\n}","export default {\n    \"name\": \"Raj Parekh\",\n    \"firstName\": \"Raj\",\n    \"lastName\": \"Parekh\",\n    \"image\": \"images/formal_pic.png\",\n    \n    \"title\": \"Full Stack Software Developer\",\n\n    \"info\": [\n        {\n            \"icon\": \"map pin\",\n            \"value\": \"Mumbai, India\",\n            \"link\": \"https://www.google.com/maps/search/mumbai/@19.0821978,72.7411,11z\"\n        },\n        {\n            \"icon\": \"birthday\",\n            \"value\": \"16/03/1998\"\n        }\n    ],\n    \"socials\": [\n        {\n            \"icon\": \"mail\",\n            \"value\": \"raj.parekh07@gmail.com\",\n            \"link\": \"mailto:raj.parekh07@gmail.com\"\n        },\n        {\n            \"icon\": \"linkedin\",\n            \"value\": \"in.linkedin.com/in/rajparekh07\",\n            \"link\": \"https://in.linkedin.com/in/rajparekh07\"\n        },\n        {\n            \"icon\": \"call\",\n            \"value\": \"+91-8879170527\",\n            \"link\": \"tel:+918879170527\"\n        },\n        {\n            \"icon\": \"github\",\n            \"value\": \"rajparekh07\",\n            \"link\": \"https://github.com/rajparekh07\",\n        },\n        {\n            \"icon\": \"bitbucket\",\n            \"value\": \"rajparekh\",\n            \"link\": \"https://bitbucket.com/rajparekh\",\n        }\n    ]\n}","import React from 'react';\n\nimport {\n    Feed,\n    Icon\n} from 'semantic-ui-react';\n\nimport GlobalStyles from '../../styles/global';\n\nclass DataValueLinks extends React.Component {\n    \n    render() {\n        return (\n            <Feed.Event>\n                <Feed.Label>\n                    <Icon name={this.props.icon} style={GlobalStyles.whiteText}></Icon>\n                </Feed.Label>\n                <Feed.Content style={GlobalStyles.whiteText} > \n                    <Feed.Summary style={GlobalStyles.whiteText} as=\"a\" target=\"_blank\" href={this.props.link}>\n                        {this.props.value}\n                    </Feed.Summary> \n                </Feed.Content>\n                \n            </Feed.Event>\n        )\n    }\n}\n\n\nexport default DataValueLinks;","import React from 'react';\n\nimport {\n    Feed,\n} from 'semantic-ui-react';\n\n\nimport DataValueLinks from '../reusables/DataValueLinks';\n\nclass DataValueLinksContainer extends React.Component {\n    \n    render() {\n        const { data } = this.props;\n        return (\n            <Feed>\n                {data.map(dataElement => ( <DataValueLinks icon = {dataElement.icon} value = {dataElement.value} link = {dataElement.link} /> ))}\n            </Feed>\n        )\n    }\n}\n\n\nexport default DataValueLinksContainer;","import React from 'react';\n\nimport {\n    Divider,\n    Icon,\n    Header\n} from 'semantic-ui-react'\n\nimport GlobalStyles from '../../styles/global'\n\nclass SectionDividers extends React.Component {\n    render() {\n        return (\n            <Divider horizontal>\n                <Header as='h4' style={GlobalStyles.whiteText}>\n                    <Icon name={this.props.icon}  />\n                    {this.props.title}\n                </Header>\n            </Divider>\n        )\n    }\n}\n\nexport default SectionDividers;","import React from 'react';\n\nimport {\n    Container,\n    Grid,\n    Header,\n    Image\n} from 'semantic-ui-react'\n\nimport GlobalStyles from '../../styles/global'\n\nimport Data from '../../data/profile'\nimport DataValueLinksContainer from './DataValueLinksContainer';\nimport SectionDividers from '../reusables/SectionDividers';\n\nclass InfoGrid extends React.Component {\n\n\n    render() {\n        return (\n            <Grid.Column width={this.props.width} style={GlobalStyles.grey} {...this.props}>\n                <Container textAlign='center' >\n                    <Grid centered columns={1}>\n                        <Grid.Row>\n                            <Image src={Data.image} circular size=\"small\" />\n                        </Grid.Row>\n                    </Grid>\n\n                    <Header size=\"large\" style={GlobalStyles.whiteText}>\n                        {Data.firstName} \n                        <span style={GlobalStyles.blueText}> {Data.lastName}</span>\n                    </Header>\n                \n                    <p size=\"tiny\" style={GlobalStyles.whiteText}> {Data.title} </p>\n\n                    <SectionDividers icon='info circle' title='Info' />\n\n                    <Grid.Row style={GlobalStyles.whiteText}>\n                        <DataValueLinksContainer data={Data.info} />\n                    </Grid.Row>\n\n                    <SectionDividers icon='user circle' title='Contact' />\n\n                    <Grid.Row style={GlobalStyles.whiteText}>\n                        <DataValueLinksContainer data={Data.socials} />\n                    </Grid.Row>\n                </Container>\n\n            </Grid.Column>\n\n        )\n    }\n}\n\nexport default InfoGrid;","import React from 'react';\n\nimport {\n    Container,\n    Grid,\n} from 'semantic-ui-react'\n\nimport GlobalStyles from '../styles/global'\n\nimport InfoGrid from './sub_components/InfoGrid';\n\nclass MainContainer extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <Container style={this.style.container}>\n                <Grid columns='equal' stackable divided>\n                        <InfoGrid width={5} />\n                        <Grid.Column width={11} style={GlobalStyles.white}>\n                            RAJ APREKH\n                        </Grid.Column>\n                </Grid>\n            </Container>\n        )\n    }\n\n    style = {\n        container: {\n            margin: 25,\n            padding: 15,\n        },\n        \n    }\n}\n\nexport default MainContainer;","// Raj Parekh Portfolio\n// 16-06-2020\n// Author: Raj Parekh\n\n\n// Import React\nimport React from 'react';\n\n// Import CSS\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\n\n\n// Import Node Modules\nimport ReactGA from 'react-ga';\n\n\n// Import project files\nimport ProductionPlaceholder from './components/ProductionPlaceholder'\nimport Container from './components/MainContainer'\n\n\n// Main App()\nfunction App() {\n\n  ReactGA.initialize('UA-169628228-01');\n  ReactGA.pageview(window.location.pathname + window.location.search);\n  \n  return  (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ?\n   (\n    <div>\n      <Container/>\n    </div>\n  )\n  :(\n    <div className=\"App\">\n      <ProductionPlaceholder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}